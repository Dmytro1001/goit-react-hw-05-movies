{"version":3,"file":"static/js/682.65353fd6.chunk.js","mappings":"mQAEaA,EAAOC,EAAAA,EAAAA,GAAH,kMAWJC,EAAMD,EAAAA,EAAAA,IAAH,mFAMHE,EAAUF,EAAAA,EAAAA,IAAH,0L,SCkCpB,EA9Ca,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,IAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKP,KAAjB,GAClC,GAAE,CAACE,IAES,KAATF,EACF,OACE,+BACE,SAACL,EAAD,UACGK,EAAKQ,KAAI,SAAAC,GAAK,OACb,yBACE,UAACX,EAAD,WACGW,EAAMC,cACL,SAACb,EAAD,CACEc,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,SAAChB,EAAD,CAAKc,IAAKG,EAASF,IAAKH,EAAMI,QAEhC,wBAAKJ,EAAMI,OACVJ,EAAMM,WACL,8BAAMN,EAAMM,UAAZ,QAEA,wBAAK,WAdFN,EAAMO,GADF,OAwBxB,C,6MCzCKC,EAAU,mCACVC,EAAW,gCAEXC,EAAmB,mCAAG,6GAEDC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,sCACoBD,IAHnB,cAElBI,EAFkB,yBAKjBA,EAASd,KAAKe,SALG,gCAOxBC,QAAQC,MAAR,MAPwB,yDAAH,qDAWnBC,EAAiB,mCAAG,WAAMC,GAAN,gGAECN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACcD,EADd,iCAC8CS,EAD9C,gCAFD,cAEhBL,EAFgB,yBAKfA,EAASd,KAAKe,SALC,gCAOtBC,QAAQC,MAAR,MAPsB,yDAAH,sDAWjBG,EAAkB,mCAAG,WAAMX,GAAN,gGAEAI,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAF,EADA,oBACcC,EADd,oBAFA,cAEjBI,EAFiB,yBAKhBA,EAASd,MALO,gCAOvBgB,QAAQC,MAAR,MAPuB,yDAAH,sDAWlBnB,EAAc,mCAAG,WAAMW,GAAN,gGAEII,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAF,EADA,4BACsBC,EADtB,oBAFJ,cAEbI,EAFa,yBAKZA,EAASd,MALG,gCAOnBgB,QAAQC,MAAR,MAPmB,yDAAH,sDAWdI,EAAiB,mCAAG,WAAMZ,GAAN,gGAECI,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAF,EADA,4BACsBC,EADtB,oBAFD,cAEhBI,EAFgB,yBAKfA,EAASd,MALM,gCAOtBgB,QAAQC,MAAR,MAPsB,yDAAH,sDAWvBC,EAAkBI,UAAY,CAC5BH,MAAOI,EAAAA,UAAAA,OAAAA,YAGTH,EAAmBE,UAAY,CAC7Bb,GAAIc,EAAAA,UAAAA,OAAAA,YAGNzB,EAAewB,UAAY,CACzBb,GAAIc,EAAAA,UAAAA,OAAAA,YAGNF,EAAkBC,UAAY,CAC5Bb,GAAIc,EAAAA,UAAAA,OAAAA,W","sources":["components/Cast/Cast.styles.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  max-width: 1200px;\n  padding: 20px 30px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Img = styled.img`\n  width: 180px;\n  height: 250px;\n  border-radius: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  max-width: 200px;\n  height: 100%;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: #ffb26b;\n  box-shadow: 8px 8px 8px 3px rgba(0, 0, 0, 0.75);\n`;\n","import { PropTypes } from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCastFetch } from '../../services/api';\nimport noPhoto from '../../images/no_profile_picture.jpg';\nimport { List, Img, Wrapper } from './Cast.styles';\n\nconst Cast = () => {\n  const [cast, setCast] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    movieCastFetch(movieId).then(data => setCast(data.cast));\n  }, [movieId]);\n\n  if (cast !== '') {\n    return (\n      <>\n        <List>\n          {cast.map(actor => (\n            <li key={actor.id}>\n              <Wrapper>\n                {actor.profile_path ? (\n                  <Img\n                    src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                    alt={actor.name}\n                  />\n                ) : (\n                  <Img src={noPhoto} alt={actor.name} />\n                )}\n                <h3>{actor.name}</h3>\n                {actor.character ? (\n                  <h4>\"{actor.character}\"</h4>\n                ) : (\n                  <h4>{null}</h4>\n                )}\n              </Wrapper>\n            </li>\n          ))}\n        </List>\n      </>\n    );\n  }\n};\n\nCast.propTypes = {\n  cast: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    profile_path: PropTypes.string.isRequired,\n    character: PropTypes.string,\n  }),\n};\n\nexport default Cast;\n","import { PropTypes } from 'prop-types';\nimport axios from 'axios';\nconst API_KEY = '935077f1f1ce8c80ce35dd9a38d63eff';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst moviesTrendingFetch = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst moviesSearchFetch = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst moviesDetailsFetch = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst movieCastFetch = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst movieReviewsFetch = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nmoviesSearchFetch.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\nmoviesDetailsFetch.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nmovieCastFetch.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nmovieReviewsFetch.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nexport {\n  moviesTrendingFetch,\n  moviesSearchFetch,\n  moviesDetailsFetch,\n  movieCastFetch,\n  movieReviewsFetch,\n};\n"],"names":["List","styled","Img","Wrapper","useState","cast","setCast","movieId","useParams","useEffect","movieCastFetch","then","data","map","actor","profile_path","src","alt","name","noPhoto","character","id","API_KEY","BASE_URL","moviesTrendingFetch","axios","response","results","console","error","moviesSearchFetch","query","moviesDetailsFetch","movieReviewsFetch","propTypes","PropTypes"],"sourceRoot":""}