{"version":3,"file":"static/js/906.2da632c9.chunk.js","mappings":"0PAEaA,EAAOC,EAAAA,EAAAA,GAAH,8JASJC,EAAUD,EAAAA,EAAAA,IAAH,0KAQPE,EAAOF,EAAAA,EAAAA,EAAH,+DAKJG,EAAOH,EAAAA,EAAAA,EAAH,iE,SCmBjB,EArCgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,IAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAWM,EAAKC,QAApB,GACrC,GAAE,CAACN,IAEY,KAAZF,EACF,OACE,+BACE,SAACN,EAAD,UACGM,EAAQS,KAAI,SAAAC,GAAM,OACjB,yBACE,UAACd,EAAD,YACE,sCACU,0BAAOc,EAAOC,aAExB,UAACd,EAAD,eAAQa,EAAOE,QAAf,QACA,UAAC,EAAD,eAAQF,EAAOG,WAAWC,MAAM,EAAG,IAAnC,WANKJ,EAAOK,GADC,OAe5B,C,6MC/BKC,EAAU,mCACVC,EAAW,gCAEXC,EAAmB,mCAAG,6GAEDC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,sCACoBD,IAHnB,cAElBI,EAFkB,yBAKjBA,EAASb,KAAKC,SALG,gCAOxBa,QAAQC,MAAR,MAPwB,yDAAH,qDAWnBC,EAAiB,mCAAG,WAAMC,GAAN,gGAECL,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACcD,EADd,iCAC8CQ,EAD9C,gCAFD,cAEhBJ,EAFgB,yBAKfA,EAASb,KAAKC,SALC,gCAOtBa,QAAQC,MAAR,MAPsB,yDAAH,sDAWjBG,EAAkB,mCAAG,WAAMV,GAAN,gGAEAI,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAF,EADA,oBACcC,EADd,oBAFA,cAEjBI,EAFiB,yBAKhBA,EAASb,MALO,gCAOvBc,QAAQC,MAAR,MAPuB,yDAAH,sDAWlBI,EAAc,mCAAG,WAAMX,GAAN,gGAEII,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAF,EADA,4BACsBC,EADtB,oBAFJ,cAEbI,EAFa,yBAKZA,EAASb,MALG,gCAOnBc,QAAQC,MAAR,MAPmB,yDAAH,sDAWdjB,EAAiB,mCAAG,WAAMU,GAAN,gGAECI,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAF,EADA,4BACsBC,EADtB,oBAFD,cAEhBI,EAFgB,yBAKfA,EAASb,MALM,gCAOtBc,QAAQC,MAAR,MAPsB,yDAAH,sDAWvBC,EAAkBI,UAAY,CAC5BH,MAAOI,EAAAA,UAAAA,OAAAA,YAGTH,EAAmBE,UAAY,CAC7BZ,GAAIa,EAAAA,UAAAA,OAAAA,YAGNF,EAAeC,UAAY,CACzBZ,GAAIa,EAAAA,UAAAA,OAAAA,YAGNvB,EAAkBsB,UAAY,CAC5BZ,GAAIa,EAAAA,UAAAA,OAAAA,W","sources":["components/Reviews/Reviews.styles.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: inline-flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n  padding: 20px 30px;\n`;\n\nexport const Wrapper = styled.div`\n  max-width: 1200px;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: #f8ead8;\n  box-shadow: 8px 8px 8px 3px rgba(0, 0, 0, 0.75);\n`;\n\nexport const Text = styled.p`\n  font-size: 15px;\n  margin: 15px 0;\n`;\n\nexport const Date = styled.p`\n  font-size: 15px;\n  font-weight: 700;\n`;\n","import { PropTypes } from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieReviewsFetch } from '../../services/api';\nimport { List, Wrapper, Date, Text } from './Reviews.styles';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    movieReviewsFetch(movieId).then(data => setReviews(data.results));\n  }, [movieId]);\n\n  if (reviews !== '') {\n    return (\n      <>\n        <List>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <Wrapper>\n                <h3>\n                  Author: <span>{review.author}</span>\n                </h3>\n                <Text>\"{review.content}\"</Text>\n                <Date>\"{review.updated_at.slice(0, 10)}\"</Date>\n              </Wrapper>\n            </li>\n          ))}\n        </List>\n      </>\n    );\n  }\n};\n\nReviews.propTypes = {\n  review: PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    updated_at: PropTypes.number,\n  }),\n};\n\nexport default Reviews;\n","import { PropTypes } from 'prop-types';\nimport axios from 'axios';\nconst API_KEY = '935077f1f1ce8c80ce35dd9a38d63eff';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst moviesTrendingFetch = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst moviesSearchFetch = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst moviesDetailsFetch = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst movieCastFetch = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst movieReviewsFetch = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nmoviesSearchFetch.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\nmoviesDetailsFetch.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nmovieCastFetch.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nmovieReviewsFetch.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nexport {\n  moviesTrendingFetch,\n  moviesSearchFetch,\n  moviesDetailsFetch,\n  movieCastFetch,\n  movieReviewsFetch,\n};\n"],"names":["List","styled","Wrapper","Text","Date","useState","reviews","setReviews","movieId","useParams","useEffect","movieReviewsFetch","then","data","results","map","review","author","content","updated_at","slice","id","API_KEY","BASE_URL","moviesTrendingFetch","axios","response","console","error","moviesSearchFetch","query","moviesDetailsFetch","movieCastFetch","propTypes","PropTypes"],"sourceRoot":""}